pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1 
        kind: Pod 
        metadata: 
            name: dind 
        spec: 
            containers: 
              - name: dind-daemon 
                image: docker:1.12.6-dind 
                securityContext: 
                    privileged: true 
                volumeMounts: 
                  - name: docker-graph-storage 
                    mountPath: /var/lib/docker 
            volumes: 
              - name: docker-graph-storage 
                emptyDir: {}
      '''
    }
  }
  
  stages {
    stage('Setup environment') {
      steps {
        // load("$JENKINS_HOME/env/validator-dev.groovy")

        script {
          env.CACHE_MODE = "" // or --no-cache
          env.GIT_SHA = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          env.DB_HOST = "terraform-20221217194338834300000005.cesxoczwd6mw.eu-west-1.rds.amazonaws.com"
          env.DB_NAME = "postgres"
          env.DB_USER = "appdbuser"
          env.DB_PASS = "ed6aziph8EiR"
        }                
      }
    }

    stage('Build app') {
      agent { label 'postgres-build' }
      steps {
        script {
          env.BUILD_MODE = "development"
          git branch: 'main', credentialsId: 'e7c50e69-131e-4beb-a109-152efd32effc', url: 'git@github.com:krateria/DevOps-Challenge.git'
          dir("jumia_phone_validator/database") {

            // sh "export PGPASSWORD=${env.DB_PASS}"
            // sh "psql -h ${env.DB_HOST} -U ${env.DB_USER} < sample.sql"
            sh "psql postgresql://${env.DB_USER}:${env.DB_PASS}@${env.DB_HOST}:5432/${env.DB_NAME} < sample.sql"
          }
        }
      }
    }
  }
}